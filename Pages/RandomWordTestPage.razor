@using Memorize.Components
@using MemorizeShared.Other
@using BlazingComponents.Components
@using Memorize.Engine
@using MemorizeShared
@attribute [Page]


<BlazingPage Height="100%">
    <Transition Height="100%">

        <Row>
            <RowGap Gap="0.5%"></RowGap>
            <Row Style="flex-grow: 1; justify-content: space-between; align-items: center">
                <BlazingButton Width="100px" Height="40px" FontSize="22px" Text="Return" Color="lavender" HoverColor="white" Click="OnClickBack"></BlazingButton>
                <BlazingCloseButton Click="OnCloseClick"></BlazingCloseButton>
            </Row>
            <RowGap Gap="0.5%"></RowGap>
        </Row>
        
        <Practice Item="@(_ex)" DelaySecondsBeforeRevealing="4" ClickedGoNext="OnClickedGoNext" ClickedIgnoreForAWhile="OnClickedIgnoreForAWhile"></Practice>

    </Transition>
</BlazingPage>


@code
{

    Expression? _ex = null;

    async Task RandomizeAsync()
    {
        await Core.WaitAsync();
        _ex = Core.Randomize();
        if (_ex != null)
        {
            await Core.SaveAsync();
        }
        Core.Signal();
    }

    protected override Task OnParametersSetAsync()
    {
        return RandomizeAsync();
    }

    void OnClickBack()
    {
        Navigator.Navigate(nameof(Home));
    }

    static async Task OnCloseClick()
    {
        await Core.WaitAsync(); // Wait for anything possibly in progress.
        await Core.OnApplicationExitAsync();
        Application.Exit();
        Core.Signal(); // Not really required.
    }

    private Task OnClickedGoNext()
    {
        return RandomizeAsync();
    }

    private Task OnClickedIgnoreForAWhile()
    {
        return RandomizeAsync();
    }
}
